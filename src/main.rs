use core::convert::TryInto;
use core::time::Duration;

use std::sync::{Arc, Mutex};

use log::info;

use embedded_svc::wifi::{AuthMethod, ClientConfiguration, Configuration};

use esp_idf_svc::hal::{delay::FreeRtos, peripherals::Peripherals};
use esp_idf_svc::log::EspLogger;
use esp_idf_svc::timer::EspTaskTimerService;
use esp_idf_svc::wifi::{BlockingWifi, EspWifi};
use esp_idf_svc::{eventloop::EspSystemEventLoop, nvs::EspDefaultNvsPartition};

use rgb_led::{RGB8, WS2812RMT};

use cgmlamp::dexcom::dexcom::Dexcom;

#[toml_cfg::toml_config]
pub struct Config {
    #[default(" ")]
    wifi_ssid: &'static str,
    #[default(" ")]
    wifi_pass: &'static str,
    #[default(" ")]
    dexcom_user: &'static str,
    #[default(" ")]
    dexcom_pass: &'static str,
}

#[allow(dead_code)]
enum LedState {
    Steady(RGB8),
    Breathe(RGB8),
    Off,
}

const BRIGHTNESS: u8 = 255;

const RED: RGB8 = RGB8 {
    r: BRIGHTNESS,
    g: 0,
    b: 0,
};
const BLUE: RGB8 = RGB8 {
    r: 0,
    g: 0,
    b: BRIGHTNESS,
};
const YELLOW: RGB8 = RGB8 {
    r: BRIGHTNESS,
    g: BRIGHTNESS,
    b: 0,
};
const BLACK: RGB8 = RGB8 { r: 0, g: 0, b: 0 };
const WHITE: RGB8 = RGB8 {
    r: BRIGHTNESS,
    g: BRIGHTNESS,
    b: BRIGHTNESS,
};

fn main() -> anyhow::Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    EspLogger::initialize_default();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Setup ESP-type stuff
    let peripherals = Peripherals::take()?;
    let sys_loop = EspSystemEventLoop::take()?;
    let nvs = EspDefaultNvsPartition::take()?;

    // Shared state between LED-writing thread and main thread
    let lock = Arc::new(Mutex::new(LedState::Breathe(WHITE)));

    // LED-writing thread
    let timer_service = EspTaskTimerService::new()?;
    let callback_timer = {
        // Set up LED
        let led = peripherals.pins.gpio8;
        let channel = peripherals.rmt.channel0;
        let mut ws2812 = WS2812RMT::new(led, channel)?;
        let lock = Arc::clone(&lock);

        timer_service.timer(move || {
            let led = lock.lock().unwrap();
            match *led {
                LedState::Steady(color) => ws2812.set_pixel(color).unwrap(),
                LedState::Breathe(color) => {
                    for i in 0..80 {
                        ws2812
                            .set_pixel(get_color_in_sweep(&color, &BLACK, 80, i))
                            .unwrap();
                        FreeRtos::delay_ms(10);
                    }
                    for i in 0..80 {
                        ws2812
                            .set_pixel(get_color_in_sweep(&BLACK, &color, 80, i))
                            .unwrap();
                        FreeRtos::delay_ms(10);
                    }
                }
                LedState::Off => ws2812.set_pixel(BLACK).unwrap(),
            };
        })?
    };
    callback_timer.every(Duration::from_secs(2))?;

    // Set up wifi, connect to AP
    let mut wifi = BlockingWifi::wrap(
        EspWifi::new(peripherals.modem, sys_loop.clone(), Some(nvs))?,
        sys_loop,
    )?;
    connect_wifi(&mut wifi, app_config.wifi_ssid, app_config.wifi_pass)?;

    // Get user id
    let mut dexcom = Dexcom::new();
    let user_id = dexcom
        .get_user_id(app_config.dexcom_user, app_config.dexcom_pass)
        .unwrap();

    // Login
    let session = dexcom
        .get_session(&user_id, app_config.dexcom_pass)
        .unwrap();

    // Monitor glucose
    let mut no_measurement_count = 0;
    loop {
        // Update last
        no_measurement_count += 1;

        // Get new reading
        if let Ok(measurement) = dexcom.get_latest_glucose(&session) {
            info!("{:?}", measurement);
            let color = glucose_to_ledstate(measurement.value);
            let mut led = lock.lock().unwrap();
            *led = color;
            no_measurement_count = 0;
        } else if no_measurement_count >= 600 {
            let mut led = lock.lock().unwrap();
            *led = LedState::Breathe(YELLOW);
        }

        // Do it once every 20 sec. Any slower and the modem will go to sleep.
        FreeRtos::delay_ms(1000 * 20);
    }
}

fn get_color_in_sweep(start_color: &RGB8, end_color: &RGB8, total: usize, idx: isize) -> RGB8 {
    let r_step = (end_color.r as f64 - start_color.r as f64) / (total as f64);
    let g_step = (end_color.g as f64 - start_color.g as f64) / (total as f64);
    let b_step = (end_color.b as f64 - start_color.b as f64) / (total as f64);

    RGB8::new(
        ((start_color.r as f64) + (idx as f64 * r_step)) as u8,
        ((start_color.g as f64) + (idx as f64 * g_step)) as u8,
        ((start_color.b as f64) + (idx as f64 * b_step)) as u8,
    )
}

fn glucose_to_ledstate(value: isize) -> LedState {
    match value {
        0..55 => LedState::Breathe(RED),
        55..250 => LedState::Steady(get_color_in_sweep(&RED, &BLUE, 250 - 55, value - 55)),
        250..300 => LedState::Steady(BLUE),
        300..500 => LedState::Breathe(BLUE),
        _ => LedState::Breathe(YELLOW),
    }
}

fn connect_wifi(
    wifi: &mut BlockingWifi<EspWifi<'static>>,
    ssid: &str,
    pass: &str,
) -> anyhow::Result<()> {
    let wifi_configuration: Configuration = Configuration::Client(ClientConfiguration {
        ssid: ssid.try_into().unwrap(),
        bssid: None,
        auth_method: AuthMethod::WPA2Personal,
        password: pass.try_into().unwrap(),
        channel: None,
        ..Default::default()
    });

    wifi.set_configuration(&wifi_configuration)?;

    wifi.start()?;
    info!("Wifi started, connecting to {}", ssid);

    loop {
        match wifi.connect() {
            Ok(_) => break,
            Err(e) => {
                info!("Error connecting to WIFI: ({}). retrying", e.to_string());
                continue;
            }
        };
    }
    info!("Wifi connected");

    wifi.wait_netif_up()?;
    info!("Wifi netif up");

    Ok(())
}
